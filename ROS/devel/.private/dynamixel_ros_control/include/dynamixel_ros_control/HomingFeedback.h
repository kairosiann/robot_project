// Generated by gencpp from file dynamixel_ros_control/HomingFeedback.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_ROS_CONTROL_MESSAGE_HOMINGFEEDBACK_H
#define DYNAMIXEL_ROS_CONTROL_MESSAGE_HOMINGFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_ros_control
{
template <class ContainerAllocator>
struct HomingFeedback_
{
  typedef HomingFeedback_<ContainerAllocator> Type;

  HomingFeedback_()
    : is_moving(false)  {
    }
  HomingFeedback_(const ContainerAllocator& _alloc)
    : is_moving(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_moving_type;
  _is_moving_type is_moving;





  typedef boost::shared_ptr< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct HomingFeedback_

typedef ::dynamixel_ros_control::HomingFeedback_<std::allocator<void> > HomingFeedback;

typedef boost::shared_ptr< ::dynamixel_ros_control::HomingFeedback > HomingFeedbackPtr;
typedef boost::shared_ptr< ::dynamixel_ros_control::HomingFeedback const> HomingFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator1> & lhs, const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.is_moving == rhs.is_moving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator1> & lhs, const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_ros_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "552aeb9cf1ea5fa2b0b9d933540d4e52";
  }

  static const char* value(const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x552aeb9cf1ea5fa2ULL;
  static const uint64_t static_value2 = 0xb0b9d933540d4e52ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_ros_control/HomingFeedback";
  }

  static const char* value(const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# feedback\n"
"bool is_moving\n"
;
  }

  static const char* value(const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HomingFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_ros_control::HomingFeedback_<ContainerAllocator>& v)
  {
    s << indent << "is_moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_ROS_CONTROL_MESSAGE_HOMINGFEEDBACK_H
